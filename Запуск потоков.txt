                string myProg = program.program.Task; // Тут я указываю имя класса, который надо считать, в данном случае Heater
                Type typelist1 = Assembly.GetExecutingAssembly().GetExportedTypes().Where(x => x.Name == myProg).FirstOrDefault(); // Получение списка только интересующего класса

                Type type = Assembly.GetExecutingAssembly().GetType(typelist1.FullName); //  "........Heater"
                object instance = Activator.CreateInstance(type);

                FieldInfo[] fi = type.GetFields(); // Получение public полей EN, cycle, Q, EQ и т.д.
  
                // Тут поиск переменной по имени связывания цикла для управления из программы(web) ???
                FieldInfo name = type.GetField("cycle"); // чтение из полей параметра cycle
                name?.SetValue(instance, cycle); // запись параметра при старте

                moduleLog.WriteLine($"cycle = {cycle}");

                // Создание и запуск потоков программ
                Thread thr = new Thread(delegate ()
                {
                    object obj = instance;
                    object[] parameters = [];

                    MethodInfo mi = type.GetMethod("Run"); // чтение метода Run из класса Heater
                    mi.Invoke(obj, parameters); // и его вызов
                });
                thr.Name = $"di{program.deviceIndex}pi{program.programIndex}"; // Задание имени потока по deviceIndex и programIndex
                thr.IsBackground = true;
                thr.Priority = (ThreadPriority)priority; // Задание приоритета выполнения программы из шаблона
                thr.Start();

                // Добавление в словарь потоков
                ModThread modThread = new ModThread
                {
                    thread = thr,
                    nameThread = thr.Name,
                    fields = fi,
                    obj = instance,
                    type = type,
                    allProgramm = program,
                    threadCnl = dictCnl, // Добавления словаря привязанных каналов входных и выходных переменных
                };
                PrgThread.Add(thr.Name, modThread);
